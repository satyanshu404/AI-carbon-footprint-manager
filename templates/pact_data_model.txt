list(
    dict(
        'id': '<string>, a unique identifier for the item.',
        'specVersion': '<string>, the version of the specification that this item adheres to.',
        'version': '<number>, a numeric version of this item.',
        'created': '<date>, a timestamp indicating when the item was created.',
        'status': '<string>, the current status of the item (e.g., active, inactive, draft).',
        'validityPeriodStart': '<date>, the start date of the period during which the item is valid.',
        'validityPeriodEnd': '<date>, the end date of the period during which the item is valid.',
        'companyName': '<string>, the name of the company associated with the item.',
        'companyIds': list(
            '<string>, an unique identifier for the company.'
        ),
        'productDescription': '<string>, a description of the product.',
        'productIds': list(
            '<string>, an identifier for the product.'
        ),
        'productCategoryCpc': '<string>, the category code for the product (e.g., CPC code).',
        'productNameCompany': '<string>, the product name as given by the company.',
        'pcf': dict(
            'declaredUnit': '<string>, the unit in which the product\'s environmental data is declared.',
            'unitaryProductAmount': '<number>, the amount of the product in the declared unit.',
            'pCfExcludingBiogenic': '<number>, the product carbon footprint excluding biogenic emissions.',
            'pCfIncludingBiogenic': '<number>, the product carbon footprint including biogenic emissions.',
            'fossilGhgEmissions': '<number>, the amount of fossil greenhouse gas emissions.',
            'fossilCarbonContent': '<number>, the amount of fossil carbon content.',
            'biogenicCarbonContent': '<number>, the amount of biogenic carbon content.',
            'dLucGhgEmissions': '<number>, the amount of direct land use change greenhouse gas emissions.',
            'landManagementGhgEmissions': '<number>, the amount of greenhouse gas emissions from land management.',
            'otherBiogenicGhgEmissions': '<number>, the amount of other biogenic greenhouse gas emissions.',
            'iLucGhgEmissions': '<number>, the amount of indirect land use change greenhouse gas emissions.',
            'biogenicCarbonWithdrawal': '<number>, the amount of biogenic carbon withdrawal.',
            'aircraftGhgEmissions': '<number>, the amount of greenhouse gas emissions from aircraft.',
            'characterizationFactors': '<string>, characterization factors used in the assessment.',
            'ipccCharacterizationFactorsSources': list(
                '<string>, sources of IPCC characterization factors.'
            ),
            'crossSectoralStandardsUsed': list(
                '<string>, cross-sectoral standards used in the assessment.'
            ),
            'productOrSectorSpecificRules': list(
                dict(
                    'operator': '<string>, the type of operator (e.g., manufacturer, supplier).',
                    'ruleNames': list(
                        '<string>, names of the rules applicable to the product or sector.'
                    ),
                    'otherOperatorName': '<string>, the name of the operator if not categorized.'
                )
            ),
            'biogenicAccountingMethodology': '<string>, the methodology used for biogenic accounting.',
            'boundaryProcessesDescription': '<string>, description of the boundary processes considered.',
            'referencePeriodStart': '<date>, the start date of the reference period.',
            'referencePeriodEnd': '<date>, the end date of the reference period.',
            'geographicScope': dict(
                'geographyRegionOrSubregion': '<string>, the geographic region or subregion covered.'
            ),
            'secondaryEmissionFactorSources': list(
                dict(
                    'name': '<string>, the name of the secondary emission factor source.',
                    'version': '<string>, the version of the secondary emission factor source.'
                )
            ),
            'exemptedEmissionsPercent': '<number>, the percentage of emissions that are exempted.',
            'exemptedEmissionsDescription': '<string>, description of the exempted emissions.',
            'packagingEmissionsIncluded': '<boolean>, indicates if packaging emissions are included (true/false).',
            'allocationRulesDescription': '<string>, description of the allocation rules applied.',
            'uncertaintyAssessmentDescription': '<string>, description of the uncertainty assessment.',
            'primaryDataShare': '<number>, the percentage of primary data used.',
            'dqi': dict(
                'coveragePercent': '<number>, the percentage of coverage in the data quality indicator.',
                'technologicalDQR': '<number>, the rating for technological data quality.',
                'temporalDQR': '<number>, the rating for temporal data quality.',
                'geographicalDQR': '<number>, the rating for geographical data quality.',
                'completenessDQR': '<number>, the rating for completeness data quality.',
                'reliabilityDQR': '<number>, the rating for reliability data quality.'
            ),
            'assurance': dict(
                'assured': '<boolean>, indicates if the data is assured (true/false).',
                'providerName': '<string>, the name of the assurance provider.'
            )
        )
    )
)